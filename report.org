#+TITLE: GSoC Work Product Submission
#+AUTHOR: Mohana Datta Yelugoti
#+OPTIONS: toc:nil ^:nil
* Introduction

  Sound Open Firmware is an open source audio DSP firmware and SDK that provides
  audio firmware infrastructure and development tools for developers who are
  interested in audio or signal processing on modern DSPs.

  As part of GSoC 2020, my project involved improving security and reliability
  of Sound Open Firmware (SOF) by [[https://en.wikipedia.org/wiki/Fuzzing][Fuzzing]] technique. In particular, it involved
  fuzzing SOF IPC input to make SOF more resilient. This following sections
  describe the experiences over the summer working on the project.

  The work done as part of GSoC can be divided into two phases.

* Phase 1:
** Objective

   Fuzzing IPC with QEMU DSP

** Deliverables

   Improved fuzzing program from SOF project to use input generation mechanisms
   from open-source fuzzers to fuzz IPC messages with QEMU DSP.

** Challenges

   - Establishing the connection between chosen open source fuzzer (AFL) to
     QEMU to send/receive IPC messages.
   - Understanding the workings of the AFL to use it efficiently for fuzzing
     IPC messages.
   - AFL works well if the program we are fuzzing is instrumented.
     Instrumentation helps the AFL program to modify the inputs in order to
     reach various parts of the code.
   - Writing a bridge program which takes input generated from the AFL with
     the help of seed inputs and passing them to the sof-fuzzer, which
     in turn passes it to the QEMU DSP.
   - sof-fuzzer can only run for one input. We need to run it again in order
     to send another input to QEMU DSP.

     This means for every input generated by AFL, sof-fuzzer has to be run
     again. This becomes a bottleneck.
   - The IPC message is run on QEMU DSP side, AFL has no feedback for the input
     it has sent to QEMU DSP, because of lack of instrumentation at the
     QEMU SOF firmware side. This leads to AFL not being able
     to generate IPC input messages intelligently.
   - More technical information can be found at the description of [[https://github.com/thesofproject/sof/pull/3100][PR#3100]]. 

** Results

   - As AFL has no feedback on how it's inputs performed at the QEMU DSP side,
     because of lack of instrumentation, it's not able to generate new intelligent inputs.
   - There were no crashes/hangs even when AFL was run for 3-4 days.
     
* Phase 2:

** Objective

   Fuzzing user space application called testbench which was developed to verify
   FW functionality for the audio components.

** Deliverables

   - Improved testbench application by fixing crashes found when the application
     is fuzzed with AFL fuzzer.
   - Documenting the process of how to fuzz a component using AFL in the SOF
     documentation.

** Challenges

   - When AFL was run on the testbench application for the first time, in 20
     minutes it was able to generate >100 topology inputs where the testbench
     application was crashing. Analysing these inputs and finding unique bugs
     which caused those crashes.
   - Understanding component related information to solve the bugs.
   
** Results

   - AFL was able to generate topology inputs which when run on testbench
     application caused the application to crash.
   - These bugs were fixed and the patches with the fixes were merged into
     the testbench code in the SOF repository.
   - When AFL was run for the second time, to generate >100 topology inputs
     which were causing crashes with testbench application, it took nearly
     6 hours compared to 20 mins in the first AFL run.
   - Apart from 2 unique bugs, all other bugs found in this run were fixed
     and were patched in the SOF repository.
   - A sample bug report for a crash found while fuzzing can be found here:
     [[https://github.com/thesofproject/sof/issues/3304][https://github.com/thesofproject/sof/issues/3304]]
   

* Links:
  
  Links to patches/issues/meetings etc done as part of the work:

** Phase 1:

  - Pull request for the work done in the Phase-1 of the GSoC period, i.e,
    fuzzing SOF QEMU using AFL:

    Link: https://github.com/thesofproject/sof/pull/3100

    The description of the PR tells the work and the design decisions made
    as part of solving the problem.

** Phase 2:

   - Issues reported in the Phase-2 of the GSoC period:

    - Open Issues: https://github.com/thesofproject/sof/issues/created_by/ymdatta
    - Closed Issues: [[https://github.com/thesofproject/sof/issues?q=is%253Aissue+author%253Aymdatta+is%253Aclosed][https://github.com/thesofproject/sof/issues/closed_by/ymdatta]]

  - Pull Requests created as part of the Phase-2:

    - Open PR's: https://github.com/thesofproject/sof/pulls/ymdatta
    - Merged PR's: [[https://github.com/thesofproject/sof/pulls?q=is%253Apr+author%253Aymdatta+is%253Aclosed][https://github.com/thesofproject/sof/pulls?q=is_Apr+author_ymdatta+is_closed]]

  - Pull requests made to SOF Documentation as part of the Phase-2:

    - Merged PR's: [[https://github.com/thesofproject/sof-docs/pulls?q=is%253Apr+author%253Aymdatta+is%253Aclosed][https://github.com/thesofproject/sof-docs/ymdatta/pulls_merged]]     

   
* Work completed:

  - Effectiveness of the AFL fuzzer is shown for fuzzing programs with
    proper instrumentation and it's ability to fuzz any kind of programs
    as long as they are properly instrumented.
  - 'Volume' component was fuzzed in both runs.

* Work to be completed:

  - Fuzzing was done only for 'volume' component, but there are other
    components for whom fuzzing has to be done like 'eq-fir',
    'eq-iir' etc.
  - Fuzzing is an iterative process. As new code is added, it brings
    out new bugs to the program. So, the fuzzing has to be done
    periodically to find out the new bugs in the programs.

* Conclusions:

  - AFL works well when the program it's trying to fuzz is instrumented.
  - When issues generated by AFL were fixed, and the AFL is run again, it
    takes a lot of time to generate new inputs which cause the application
    to crash. But, these inputs will explore the depth of the application
    and report any errors present.

* Future work:

  - Making the process automatic. Currently, when AFL reports
    crashes, those crashes are to be checked manually and reports
    are to be made from them. But, having a mechanism which
    is able to identify unique set of bugs and file them in the
    repository would help a lot.

  - A mechanism which as part of the fuzzer, is able to fuzz
    only a specific part of the program, rather than the entire
    program would be helpful. Work has to be done in this area.
